using TikzGraphs, TikzPictures, LinearAlgebra, GraphRecipes, Plots, Graphs, GraphPlot
import Pkg; Pkg.add("TikzGraphs")

function graph_matrix(x, pop)
    p = pop
    A = Float64[ rand() < 0.5 ? 0 : rand() for i=1:p, j=1:p]
    println(A)
    for i=1:p
        A[i, 1:i-1] = A[1:i-1, i]
        A[i, i] = 0
    end
    graphplot(A, markersize = 0.2,
        #   node_weights = 1:p,
        #   markercolor = range(colorant"yellow", stop=colorant"red", length=p),
          names = 1:p,
          fontsize = 10,
          linecolor = :darkgrey
          )
end

# graph_matrix(cur, 15)
g = wheel_graph(sim.population)
graphplot(g, curves=false)
nodelabels = 1:sim.population
# gr = SimpleGraph(sim.population)
# add_edge!(gr,1,5)
# add_edge!(gr,2,4)
# add_edge!(gr,3,4)
# add_edge!(gr,4,5)
# graphplot(gr)
test_graph = LightGraphs.DiGraph(cur)
graphplot(test_graph)
g = Graphs.path_graph(10)
g = wheel_graph(10)
g = Graphs.Graph(10)
Graphs.add_edge!(g, 1, 2)
Graphs.add_edge!(g, 1, 3)
Graphs.add_edge!(g, 1, 4)
Graphs.add_edge!(g, 1, 5)
Graphs.add_edge!(g, 1, 6)
Graphs.add_edge!(g, 1, 7)
Graphs.add_edge!(g, 1, 8)
Graphs.add_edge!(g, 1, 9)
Graphs.add_edge!(g, 1, 10)
Graphs.add_edge!(g, 2, 4)
Graphs.add_edge!(g, 2, 5)
Graphs.add_edge!(g, 2, 6)
Graphs.add_edge!(g, 2, 7)
Graphs.add_edge!(g, 2, 8)
Graphs.add_edge!(g, 2, 9)
Graphs.add_edge!(g, 2, 10)
Graphs.add_edge!(g, 3, 4)
Graphs.add_edge!(g, 3, 5)
Graphs.add_edge!(g, 3, 6)
Graphs.add_edge!(g, 3, 7)
Graphs.add_edge!(g, 3, 8)
Graphs.add_edge!(g, 3, 9)
Graphs.add_edge!(g, 3, 10)
Graphs.add_edge!(g, 4, 5)
Graphs.add_edge!(g, 4, 6)
Graphs.add_edge!(g, 4, 7)
Graphs.add_edge!(g, 4, 8)
Graphs.add_edge!(g, 4, 9)
Graphs.add_edge!(g, 4, 10)
Graphs.add_edge!(g, 5, 6)
Graphs.add_edge!(g, 5, 7)
Graphs.add_edge!(g, 5, 8)
Graphs.add_edge!(g, 5, 9)
Graphs.add_edge!(g, 5, 10)
Graphs.add_edge!(g, 6, 7)
Graphs.add_edge!(g, 6, 8)
Graphs.add_edge!(g, 6, 9)
Graphs.add_edge!(g, 6, 10)
Graphs.add_edge!(g, 7, 8)
Graphs.add_edge!(g, 7, 9)
Graphs.add_edge!(g, 7, 10)
Graphs.add_edge!(g, 8, 9)
Graphs.add_edge!(g, 8, 10)
Graphs.add_edge!(g, 9, 10)

plot(g, nodelabel=1:10)
curr = LinearAlgebra.Symmetric(cur)
attempt = Graphs.Graph(curr)
gplot(attempt, nodelabel=1:15)
# am = Matrix(adjacency_matrix(g))
# loc_x, loc_y = layout_spring_adj(am)
# LightGraphs.draw_layout_adj(am)
nm = Graphs.wheel_graph(10)
nm = path_graph(10)
nm = Graphs.SimpleDiGraph(cur)
ne(nm)
Graphs.add_edge!(nm, 9, 10)
t = Plots.plot(nm, nodelabel=1:15)
save(SVG("wheel10.svg"), t)